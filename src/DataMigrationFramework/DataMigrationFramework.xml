<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DataMigrationFramework</name>
    </assembly>
    <members>
        <member name="T:DataMigrationFramework.ConsumerHelper`1">
            <summary>
            Helper class to distribute items to consume.
            </summary>
            <typeparam name="T">
            Type name of the model.
            </typeparam>
        </member>
        <member name="F:DataMigrationFramework.ConsumerHelper`1._destination">
            <summary>
            Destination instance.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.ConsumerHelper`1._numberOfConsumers">
            <summary>
            Number of consumers.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.ConsumerHelper`1.#ctor(DataMigrationFramework.IDestination{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.ConsumerHelper`1"/> class.
            </summary>
            <param name="destination">
            A <see cref="T:DataMigrationFramework.IDestination`1"/> instance.
            </param>
            <param name="numberOfConsumers">
            Number of consumers.
            </param>
        </member>
        <member name="M:DataMigrationFramework.ConsumerHelper`1.ConsumeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Consume given items.
            </summary>
            <param name="items">
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items to pass it to destination consumer.
            </param>
            <param name="cancellationToken">
            Cancellation token used for cancellation.
            </param>
            <returns>
            Actual items consumed successfully.
            </returns>
        </member>
        <member name="T:DataMigrationFramework.DefaultDataMigration`1">
            <summary>
            Default data migration implementation of <see cref="T:DataMigrationFramework.IDataMigration"/>.
            </summary>
            <typeparam name="T">
            Type name corresponding to the data migration model which is shared by the <see cref="T:DataMigrationFramework.ISource`1"/> and <see cref="T:DataMigrationFramework.IDestination`1"/>.
            </typeparam>
        </member>
        <member name="F:DataMigrationFramework.DefaultDataMigration`1._monitor">
            <summary>
            Migration monitor.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.DefaultDataMigration`1._source">
            <summary>
            Data migration source.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.DefaultDataMigration`1._destination">
            <summary>
            Data migration destination.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.DefaultDataMigration`1._settings">
            <summary>
            Settings used for migration.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.DefaultDataMigration`1._cancellationToken">
            <summary>
            Cancellation token used for cancelling the running migration process.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.DefaultDataMigration`1._parameters">
            <summary>
            Runtime parameters for source and destination.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.DefaultDataMigration`1._statusCollector">
            <summary>
            Status collector.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.DefaultDataMigration`1._disposed">
            <summary>
            Flag for keeping disposed or not.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.DefaultDataMigration`1.#ctor(System.Guid,System.String,DataMigrationFramework.ISource{`0},DataMigrationFramework.IDestination{`0},DataMigrationFramework.Model.Settings,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.DefaultDataMigration`1"/> class.
            </summary>
            <param name="id">
            Migration identifier.
            </param>
            <param name="name">
            Migration name.
            </param>
            <param name="source">
            A <see cref="T:DataMigrationFramework.ISource`1"/> implementation of the source interface for the data.
            </param>
            <param name="destination">
            A <see cref="T:DataMigrationFramework.IDestination`1"/> implementation of the destination for the data.
            </param>
            <param name="settings">
            A <see cref="T:DataMigrationFramework.Model.Settings"/> used for migration.
            </param>
            <param name="parameters">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> parameters passed to source and destination references for runtime parameters.
            </param>
        </member>
        <member name="P:DataMigrationFramework.DefaultDataMigration`1.Id">
            <summary>
            Gets migration identifier.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.DefaultDataMigration`1.Name">
            <summary>
            Gets migration name.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.DefaultDataMigration`1.CurrentStatus">
            <summary>
            Gets current migration status.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.DefaultDataMigration`1.LastException">
            <summary>
            Gets last exception.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.DefaultDataMigration`1.CurrentMigrationInformation">
            <summary>
            Gets current migration information.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.DefaultDataMigration`1.StartAsync">
            <summary>
            Starts the migration process.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> object representing asynchronous operation. A <see cref="T:DataMigrationFramework.Model.MigrationStatus"/> will be returned as part of task object.
            </returns>
        </member>
        <member name="M:DataMigrationFramework.DefaultDataMigration`1.Subscribe(System.IObserver{DataMigrationFramework.Model.MigrationInformation})">
            <summary>
            Subscribes to the process.
            </summary>
            <param name="observer">
            A <see cref="T:System.IObserver`1"/> instance.
            </param>
            <returns>
            A <see cref="T:System.IDisposable"/> where subscribers can unsubscribe.
            </returns>
        </member>
        <member name="M:DataMigrationFramework.DefaultDataMigration`1.StopAsync">
            <summary>
            Stops the running migration process.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> representing asynchronous operation.
            </returns>
        </member>
        <member name="M:DataMigrationFramework.DefaultDataMigration`1.Dispose">
            <summary>
            Disposes the used resources.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.DefaultDataMigration`1.InternalStart">
            <summary>
            Starts the migration process.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:DataMigrationFramework.DefaultDataMigration`1.Validate">
            <summary>
            Validates the settings before start.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.DefaultDataMigration`1.FlagStatus(DataMigrationFramework.Model.MigrationStatus)">
            <summary>
            Flags the current migration status.
            </summary>
            <param name="status">
            A <see cref="T:DataMigrationFramework.Model.MigrationStatus"/> status.
            </param>
        </member>
        <member name="M:DataMigrationFramework.DefaultDataMigration`1.Notify">
            <summary>
            Notifies to the observers.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.DefaultDataMigration`1.Dispose(System.Boolean)">
            <summary>
            Dispose method.
            </summary>
            <param name="isDisposing">
            Flag to indicate whether it is coming through dispose.
            </param>
        </member>
        <member name="T:DataMigrationFramework.DefaultMigrationFactory">
            <summary>
            Default implementation of migration. Uses the JSON value to represent the migration information.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.DefaultMigrationFactory._container">
            <summary>
            Autofac container used for registering and resolving the instances.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.DefaultMigrationFactory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.DefaultMigrationFactory"/> class.
            </summary>
            <param name="configValue">
            JSON Configuration value representing the migration information.
            </param>
        </member>
        <member name="P:DataMigrationFramework.DefaultMigrationFactory.Configuration">
            <summary>
            Gets configuration representing data migrations.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.DefaultMigrationFactory.Get(System.Guid,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Get data migration reference for the given name.
            </summary>
            <remarks>
            Name is defined in the data migration configuration JSON file.
            </remarks>
            <param name="id">
            Migration identifier.
            </param>
            <param name="migrationName">
            Name of the data migration defined in configuration file.
            </param>
            <param name="parameters">
            Parameters passed to source and destination while creating the data migration.
            </param>
            <returns>
            A <see cref="T:DataMigrationFramework.IDataMigration"/> reference which can be used to start and stop the data migration.
            </returns>
        </member>
        <member name="T:DataMigrationFramework.DefaultMigrationManager">
            <summary>
            Default implementation of <see cref="T:DataMigrationFramework.IMigrationManager"/> class.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.DefaultMigrationManager._factory">
            <summary>
            Factor for creating migration instances.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.DefaultMigrationManager._dataMigrationsMap">
            <summary>
            Data migration map.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.DefaultMigrationManager.#ctor(DataMigrationFramework.IMigrationFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.DefaultMigrationManager"/> class.
            </summary>
            <param name="factory">
            A <see cref="T:DataMigrationFramework.IMigrationFactory"/> used for creating the migration instances.
            </param>
        </member>
        <member name="M:DataMigrationFramework.DefaultMigrationManager.Create(System.Guid,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates data migration reference if one does not exists, otherwise creates new one.
            </summary>
            <param name="id">
            Id of the migration.
            </param>
            <param name="migrationTaskName">
            Migration task name.
            </param>
            <param name="parameters">
            Task parameters.
            </param>
            <returns>
            A <see cref="T:DataMigrationFramework.IDataMigration"/> instance. Either a newly created one if does not exist or previously created one.
            </returns>
        </member>
        <member name="M:DataMigrationFramework.DefaultMigrationManager.Get(System.Guid)">
            <summary>
            Gets existing data migration if one found.
            </summary>
            <param name="id">
            Unique identifier.
            </param>
            <returns>
            A <see cref="T:DataMigrationFramework.IDataMigration"/> instance if found, otherwise null.
            </returns>
        </member>
        <member name="M:DataMigrationFramework.DefaultMigrationManager.Remove(System.Guid)">
            <summary>
            Remove the existing.
            </summary>
            <param name="id">
            Unique identifier identifying the existing item.
            </param>
        </member>
        <member name="T:DataMigrationFramework.Exceptions.ErrorThresholdReachedException">
            <summary>
            Represents error threshold exception.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.Exceptions.ErrorThresholdReachedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.Exceptions.ErrorThresholdReachedException"/> class.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.Exceptions.ErrorThresholdReachedException.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.Exceptions.ErrorThresholdReachedException"/> class.
            </summary>
            <param name="message">
            Exception message.
            </param>
            <param name="errorCount">
            Error count.
            </param>
            <param name="errorThreshold">
            Error threshold.
            </param>
        </member>
        <member name="M:DataMigrationFramework.Exceptions.ErrorThresholdReachedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.Exceptions.ErrorThresholdReachedException"/> class.
            </summary>
            <param name="message">
            Exception message.
            </param>
            <param name="inner">
            A <see cref="T:System.Exception"/> inner exception.
            </param>
        </member>
        <member name="M:DataMigrationFramework.Exceptions.ErrorThresholdReachedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.Exceptions.ErrorThresholdReachedException"/> class.
            </summary>
            <param name="info">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance.
            </param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance.
            </param>
        </member>
        <member name="P:DataMigrationFramework.Exceptions.ErrorThresholdReachedException.Message">
            <summary>
            Gets message string.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Exceptions.ErrorThresholdReachedException.ErrorCount">
            <summary>
            Gets error count.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Exceptions.ErrorThresholdReachedException.ErrorThreshold">
            <summary>
            Gets error threshold count.
            </summary>
        </member>
        <member name="T:DataMigrationFramework.Exceptions.MaxLimitReachedException">
            <summary>
            Represents error threshold exception.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.Exceptions.MaxLimitReachedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.Exceptions.MaxLimitReachedException"/> class.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.Exceptions.MaxLimitReachedException.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.Exceptions.MaxLimitReachedException"/> class.
            </summary>
            <param name="message">
            Exception message.
            </param>
            <param name="currentRecordCount">
            Current record count.
            </param>
            <param name="maxLimit">
            Maximum limit value.
            </param>
        </member>
        <member name="M:DataMigrationFramework.Exceptions.MaxLimitReachedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.Exceptions.MaxLimitReachedException"/> class.
            </summary>
            <param name="message">
            Exception message.
            </param>
            <param name="inner">
            A <see cref="T:System.Exception"/> inner exception.
            </param>
        </member>
        <member name="M:DataMigrationFramework.Exceptions.MaxLimitReachedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.Exceptions.MaxLimitReachedException"/> class.
            </summary>
            <param name="info">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance.
            </param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance.
            </param>
        </member>
        <member name="P:DataMigrationFramework.Exceptions.MaxLimitReachedException.Message">
            <summary>
            Gets message string.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Exceptions.MaxLimitReachedException.CurrentRecordCount">
            <summary>
            Gets error count.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Exceptions.MaxLimitReachedException.MaxLimit">
            <summary>
            Gets error threshold count.
            </summary>
        </member>
        <member name="T:DataMigrationFramework.Extension.BuilderExtension">
            <summary>
            Autofac builder extension.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.Extension.BuilderExtension.Register(Autofac.ContainerBuilder,DataMigrationFramework.Model.Configuration)">
            <summary>
            Register types containing in migration configuration.
            </summary>
            <param name="builder">
            A <see cref="T:Autofac.ContainerBuilder"/> instance.
            </param>
            <param name="config">
            A <see cref="T:DataMigrationFramework.Model.Configuration"/> where types were defined.
            </param>
        </member>
        <member name="T:DataMigrationFramework.IDataMigration">
            <summary>
            Interface defining the data migration.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.IDataMigration.CurrentStatus">
            <summary>
            Gets current migration status.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.IDataMigration.StartAsync">
            <summary>
            Starts the migration process.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> object representing asynchronous operation. A <see cref="T:DataMigrationFramework.Model.MigrationStatus"/> will be returned as part of task object.
            </returns>
        </member>
        <member name="M:DataMigrationFramework.IDataMigration.StopAsync">
            <summary>
            Stop the current running migration process.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> object representing asynchronous operation.
            </returns>
        </member>
        <member name="T:DataMigrationFramework.IDestination`1">
            <summary>
            Destination interface used for implementing data source for migration.
            Migration framework uses Consume method to pass the data.
            </summary>
            <typeparam name="T">
            The type of the model where source and destination use.
            </typeparam>
        </member>
        <member name="M:DataMigrationFramework.IDestination`1.PrepareAsync(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Prepares the destination before the migration called by the framework.
            </summary>
            <remarks>
            Use this to do one time activity for migration.
            </remarks>
            <param name="parameters">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> parameters passed from the data migration.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> object representing the async operation.
            </returns>
        </member>
        <member name="M:DataMigrationFramework.IDestination`1.ConsumeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Consuming the migration model items.
            </summary>
            <param name="items">
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of migration model.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:DataMigrationFramework.IDestination`1.CleanupAsync(DataMigrationFramework.Model.MigrationStatus)">
            <summary>
            Cleanup done after migration.
            </summary>
            <remarks>
            Called by the framework when migration is done one time. Use this method to do any cleanup operation.
            </remarks>
            <param name="state">
            A <see cref="T:DataMigrationFramework.Model.MigrationStatus"/> status representing the status.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="T:DataMigrationFramework.IMigrationFactory">
            <summary>
            Migration factory for creating the <see cref="T:DataMigrationFramework.IDataMigration"/> instances.
            </summary>
            <remarks>
            Use this for getting migration reference from the JSON configuration.
            </remarks>
        </member>
        <member name="P:DataMigrationFramework.IMigrationFactory.Configuration">
            <summary>
            Gets the current configuration information.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="P:DataMigrationFramework.IMigrationFactory.Configuration"/> representing the data migration configuration.
            </returns>
        </member>
        <member name="M:DataMigrationFramework.IMigrationFactory.Get(System.Guid,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Get data migration reference for the given name.
            </summary>
            <remarks>
            Name is defined in the data migration configuration JSON file.
            </remarks>
            <param name="id">
            Migration identifier.
            </param>
            <param name="migrationName">
            Name of the data migration defined in configuration file.
            </param>
            <param name="parameters">
            Parameters passed to source and destination while creating the data migration.
            </param>
            <returns>
            A <see cref="T:DataMigrationFramework.IDataMigration"/> reference which can be used to start and stop the data migration.
            </returns>
        </member>
        <member name="T:DataMigrationFramework.IMigrationManager">
            <summary>
            Manages the migration.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.IMigrationManager.Create(System.Guid,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates data migration reference if one does not exists, otherwise creates new one.
            </summary>
            <param name="id">
            Id of the migration.
            </param>
            <param name="migrationTaskName">
            Migration task name.
            </param>
            <param name="parameters">
            Task parameters.
            </param>
            <returns>
            A <see cref="T:DataMigrationFramework.IDataMigration"/> instance. Either a newly created one if does not exist or previously created one.
            </returns>
        </member>
        <member name="M:DataMigrationFramework.IMigrationManager.Get(System.Guid)">
            <summary>
            Gets existing data migration if one found.
            </summary>
            <param name="id">
            Unique identifier.
            </param>
            <returns>
            A <see cref="T:DataMigrationFramework.IDataMigration"/> instance if found, otherwise null.
            </returns>
        </member>
        <member name="M:DataMigrationFramework.IMigrationManager.Remove(System.Guid)">
            <summary>
            Remove the existing.
            </summary>
            <param name="id">
            Unique identifier identifying the existing item.
            </param>
        </member>
        <member name="T:DataMigrationFramework.ISource`1">
            <summary>
            Source interface used for implementing data source for migration.
            Migration framework uses GetAsync method to get data and pass it on to destination consumer.
            </summary>
            <typeparam name="T">
            The type of the model where source and destination use.
            </typeparam>
        </member>
        <member name="M:DataMigrationFramework.ISource`1.PrepareAsync(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Prepares the source before the migration called by the framework.
            </summary>
            <remarks>
            Use this to do one time activity for migration.
            </remarks>
            <param name="parameters">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> parameters passed from the data migration.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> object representing the async operation.
            </returns>
        </member>
        <member name="M:DataMigrationFramework.ISource`1.ProduceAsync(System.Int32)">
            <summary>
            Produces the items to be used by the destination.
            </summary>
            <remarks>
            Framework uses this method to send data to destination. Framework stops calling this method once it returns empty list.
            </remarks>
            <param name="batchSize">
            Size of the items to be produced for each call by the producer. Used to limit the resource during the run.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result"/> property returns the list of model objects.
            </returns>
        </member>
        <member name="M:DataMigrationFramework.ISource`1.CleanupAsync(DataMigrationFramework.Model.MigrationStatus)">
            <summary>
            Cleanup done after migration.
            </summary>
            <remarks>
            Called by the framework when migration is done one time. Use this method to do any cleanup operation.
            </remarks>
            <param name="state">
            A <see cref="T:DataMigrationFramework.Model.MigrationStatus"/> status representing the status.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="T:DataMigrationFramework.LimitedSizeDictionary`2">
            <summary>
            Limits the size of the dictionary to certain items.
            </summary>
            <typeparam name="TKey">
            Dictionary key.
            </typeparam>
            <typeparam name="TValue">
            Dictionary value.
            </typeparam>
        </member>
        <member name="F:DataMigrationFramework.LimitedSizeDictionary`2._size">
            <summary>
            Size of the dictionary.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.LimitedSizeDictionary`2._trimSize">
            <summary>
            Trim size.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.LimitedSizeDictionary`2._comparer">
            <summary>
            Key comparer.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.LimitedSizeDictionary`2._dictionary">
            <summary>
            Actual Dictionary.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.LimitedSizeDictionary`2._backendList">
            <summary>
            Backend list to maintain the dictionary items and trim whenever it is needed.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.LimitedSizeDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.Comparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.LimitedSizeDictionary`2"/> class.
            </summary>
            <param name="size">
            Size of the dictionary.
            </param>
            <param name="trimSize">
            Trim size where it will be trimmed by.
            <example>
            For size 100 and trim size =10 , whenever the size reaches to 110 it will  be trimmed by 10 to make it 100 again.
            </example>
            </param>
            <param name="comparer">
            A <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> comparer.
            </param>
        </member>
        <member name="P:DataMigrationFramework.LimitedSizeDictionary`2.Dictionary">
            <summary>
            Gets under laying dictionary as read only.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.LimitedSizeDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds entry and trims if the size limit is reached.
            </summary>
            <param name="entry">
            A <see cref="T:System.Collections.Generic.KeyValuePair`2"/> entry.
            </param>
        </member>
        <member name="M:DataMigrationFramework.LimitedSizeDictionary`2.Remove(`0)">
            <summary>
            Removes the item from dictionary.
            </summary>
            <param name="id">
            Key vale.
            </param>
        </member>
        <member name="T:DataMigrationFramework.LimitedSizeDictionary`2.MutableKeyValuePair`2">
            <summary>
            Key value pair where a value can be updated.
            </summary>
            <typeparam name="TKey1">
            Key type name.
            </typeparam>
            <typeparam name="TValue1">
            Value type name.
            </typeparam>
        </member>
        <member name="M:DataMigrationFramework.LimitedSizeDictionary`2.MutableKeyValuePair`2.#ctor(`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.LimitedSizeDictionary`2.MutableKeyValuePair`2"/> class.
            </summary>
            <param name="key">
            Name of the key.
            </param>
            <param name="val">
            Value of the key.
            </param>
        </member>
        <member name="P:DataMigrationFramework.LimitedSizeDictionary`2.MutableKeyValuePair`2.Key">
            <summary>
            Gets key name.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.LimitedSizeDictionary`2.MutableKeyValuePair`2.Value">
            <summary>
            Gets or sets value of the key.
            </summary>
        </member>
        <member name="T:DataMigrationFramework.MigrationModule">
            <summary>
            Migration module for registering in to the container.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.MigrationModule._configData">
            <summary>
            Configuration JSON data containing migration information.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.MigrationModule.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.MigrationModule"/> class.
            </summary>
            <param name="configData">
            Configuration data.
            </param>
        </member>
        <member name="M:DataMigrationFramework.MigrationModule.Load(Autofac.ContainerBuilder)">
            <summary>
            Registers migration types in to container.
            </summary>
            <param name="builder">
            A <see cref="T:Autofac.ContainerBuilder"/> instance.
            </param>
        </member>
        <member name="T:DataMigrationFramework.MigrationMonitor">
            <summary>
            Migration monitor helper class.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.MigrationMonitor._observers">
            <summary>
            List of observers for notification.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.MigrationMonitor._unSubscribers">
            <summary>
            Un subscribers are maintained to cleanup upon dispose.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.MigrationMonitor._disposed">
            <summary>
            Flag for keeping track of disposed or not.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.MigrationMonitor.Subscribe(System.IObserver{DataMigrationFramework.Model.MigrationInformation})">
            <summary>
            Subscribe helper.
            </summary>
            <param name="observer">
            A <see cref="T:System.IObserver`1"/> of <see cref="T:DataMigrationFramework.Model.MigrationStatus"/> instance.
            </param>
            <returns>
            A <see cref="T:System.IDisposable"/> where one can unsubscribe.
            </returns>
        </member>
        <member name="M:DataMigrationFramework.MigrationMonitor.Notify(DataMigrationFramework.Model.MigrationInformation)">
            <summary>
            Notifies the progress to observers.
            </summary>
            <param name="info">
            A <see cref="T:DataMigrationFramework.Model.MigrationInformation"/> info.
            </param>
        </member>
        <member name="M:DataMigrationFramework.MigrationMonitor.Dispose">
            <summary>
            Disposes the internals.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.MigrationMonitor.Dispose(System.Boolean)">
            <summary>
            Disposes the unSubscribers.
            </summary>
            <param name="disposing">
            Flag to see that we are disposing.
            </param>
        </member>
        <member name="T:DataMigrationFramework.MigrationMonitor.UnSubscriber">
            <summary>
            un subscriber utility class.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.MigrationMonitor.UnSubscriber._observers">
            <summary>
            List of observers.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.MigrationMonitor.UnSubscriber._observer">
            <summary>
            Observer which will be removed.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.MigrationMonitor.UnSubscriber.#ctor(System.Collections.Generic.List{System.IObserver{DataMigrationFramework.Model.MigrationInformation}},System.IObserver{DataMigrationFramework.Model.MigrationInformation})">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.MigrationMonitor.UnSubscriber"/> class.
            </summary>
            <param name="observers">List of observers.</param>
            <param name="observer">Observer to be removed.</param>
        </member>
        <member name="M:DataMigrationFramework.MigrationMonitor.UnSubscriber.Dispose">
            <summary>
            Disposes method.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.MigrationMonitor.UnSubscriber.Dispose(System.Boolean)">
            <summary>
            Dispose utility.
            </summary>
            <param name="isDisposing">true if disposing.</param>
        </member>
        <member name="T:DataMigrationFramework.Model.Configuration">
            <summary>
            Configuration used for migration types.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.Model.Configuration.#ctor(System.String,System.String,System.String,System.String,DataMigrationFramework.Model.Settings)">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.Model.Configuration"/> class.
            </summary>
            <param name="name">
            Unique name of the data migration.
            </param>
            <param name="sourceTypeName">
            Type name (with name,assembly format) which implements <see cref="T:DataMigrationFramework.ISource`1"/> for providing the data.
            </param>
            <param name="destinationTypeName">
            Type name (with name,assembly format) which implements <see cref="T:DataMigrationFramework.IDestination`1"/> for consuming the data.
            </param>
            <param name="modelTypeName">
            Type name which is shared between source and destinations.
            </param>
            <param name="settings">
            A <see cref="P:DataMigrationFramework.Model.Configuration.Settings"/> used by the data migration during migration process.
            </param>
        </member>
        <member name="P:DataMigrationFramework.Model.Configuration.Name">
            <summary>
            Gets name of the migration.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.Configuration.SourceTypeName">
            <summary>
            Gets source type name.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.Configuration.DestinationTypeName">
            <summary>
            Gets destination type name.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.Configuration.ModelTypeName">
            <summary>
            Gets model type name.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.Configuration.Settings">
            <summary>
            Gets settings.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.Configuration.SourceType">
            <summary>
            Gets source type.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.Configuration.DestinationType">
            <summary>
            Gets destination type.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.Configuration.ModelType">
            <summary>
            Gets model type.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.Model.Configuration.ValidTypeName(System.String,System.String)">
            <summary>
            Valid type name for correct format which should be in name,assemblyName format.
            </summary>
            <param name="typeName">
            Type name with name,assemblyName format.
            </param>
            <param name="property">
            Property name to be used in exception to inform the property being failed.
            </param>
            <returns>
            Given type name echoed back if successful.
            </returns>
        </member>
        <member name="M:DataMigrationFramework.Model.Configuration.ParseForType(System.String)">
            <summary>
            Parse the type name in to actual instance of type.
            </summary>
            <param name="typeName">
            Type name containing name and assembly name.
            </param>
            <returns>
            A <see cref="T:System.Type"/> from the assembly.
            </returns>
        </member>
        <member name="T:DataMigrationFramework.Model.MigrationInformation">
            <summary>
            Migration information.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.Model.MigrationInformation.#ctor(System.Guid,DataMigrationFramework.Model.MigrationStatus,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.Model.MigrationInformation"/> class.
            </summary>
            <param name="id">
            Migration id.
            </param>
            <param name="status">
            A <see cref="T:DataMigrationFramework.Model.MigrationStatus"/> representing the status of migration.
            </param>
            <param name="parameters">
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> migration parameters.
            </param>
        </member>
        <member name="P:DataMigrationFramework.Model.MigrationInformation.DateStart">
            <summary>
            Gets date time started the migration.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.MigrationInformation.DateEnd">
            <summary>
            Gets or sets date time ended the migration.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.MigrationInformation.Id">
            <summary>
            Gets migration id.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.MigrationInformation.Status">
            <summary>
            Gets migration status.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.MigrationInformation.Parameters">
            <summary>
            Gets migration parameters.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.MigrationInformation.LastException">
            <summary>
            Gets last exception.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.MigrationInformation.TotalRecordsProduced">
            <summary>
            Gets total records produced.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.MigrationInformation.TotalRecordsConsumed">
            <summary>
            Gets total records produced.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.MigrationInformation.TotalErrorCount">
            <summary>
            Gets current error records count.
            </summary>
        </member>
        <member name="T:DataMigrationFramework.Model.MigrationStatus">
            <summary>
            Represents the migration status.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.Model.MigrationStatus.NotStarted">
            <summary>
            Not started status.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.Model.MigrationStatus.Starting">
            <summary>
            Starting the process.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.Model.MigrationStatus.Running">
            <summary>
            Running state.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.Model.MigrationStatus.Completed">
            <summary>
            Completed status.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.Model.MigrationStatus.Cancelled">
            <summary>
            Cancelled status.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.Model.MigrationStatus.Exception">
            <summary>
            Exception status.
            </summary>
        </member>
        <member name="T:DataMigrationFramework.Model.Settings">
            <summary>
            Settings used for migration process.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.Model.Settings._notifyStatusRecordSizeFrequency">
            <summary>
            Record count frequency for notifications.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.Model.Settings._maximumRecordsCountLimit">
            <summary>
            Record count limit.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.Model.Settings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.Model.Settings"/> class.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.Settings.Default">
            <summary>
            Gets default settings.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.Settings.BatchSize">
            <summary>
            Gets or sets batch size which will used to produce and consume.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.Settings.DelayBetweenBatches">
            <summary>
            Gets or sets delay time between batches in milliseconds.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.Settings.ErrorThresholdBeforeExit">
            <summary>
            Gets or sets number of errors where the migration process stops.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.Settings.NumberOfConsumers">
            <summary>
            Gets or sets number of consumers active.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.Settings.NumberOfProducers">
            <summary>
            Gets or sets number of producers active.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.Settings.NotifyStatusRecordSizeFrequency">
            <summary>
            Gets or sets notify status for every given number of records.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.Model.Settings.MaxNumberOfRecords">
            <summary>
            Gets or sets notify status for every given number of records.
            </summary>
        </member>
        <member name="T:DataMigrationFramework.ProducerHelper`1">
            <summary>
            Helper class to consolidate from multiple producers.
            </summary>
            <typeparam name="T">
            Type name of the model.
            </typeparam>
        </member>
        <member name="F:DataMigrationFramework.ProducerHelper`1._source">
            <summary>
            Source instance.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.ProducerHelper`1._numberOfProducers">
            <summary>
            Number of consumers.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.ProducerHelper`1.#ctor(DataMigrationFramework.ISource{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.ProducerHelper`1"/> class.
            </summary>
            <param name="source">
            A <see cref="T:DataMigrationFramework.ISource`1"/> instance for collecting the items.
            </param>
            <param name="numberOfProducers">
            Number of producers.
            </param>
        </member>
        <member name="M:DataMigrationFramework.ProducerHelper`1.ProduceAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Consolidates the items from the sources.
            </summary>
            <param name="batchSize">
            Batch size used for querying the source for number of items.
            </param>
            <param name="cancellationToken">
            Cancellation token used for cancellation.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items.
            </returns>
        </member>
        <member name="T:DataMigrationFramework.StatusCollector">
            <summary>
            Collects the status of the migration process.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.StatusCollector._settings">
            <summary>
            Settings used for controlling.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.StatusCollector._previousDivision">
            <summary>
            Previous value.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.StatusCollector._totalProduced">
            <summary>
            Total produced.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.StatusCollector._totalConsumed">
            <summary>
            Total produced.
            </summary>
        </member>
        <member name="F:DataMigrationFramework.StatusCollector._totalErrors">
            <summary>
            Total errors count.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.StatusCollector.#ctor(DataMigrationFramework.Model.Settings)">
            <summary>
            Initializes a new instance of the <see cref="T:DataMigrationFramework.StatusCollector"/> class.
            </summary>
            <param name="settings">
            A <see cref="T:DataMigrationFramework.Model.Settings"/> used for controlling the process.
            </param>
        </member>
        <member name="P:DataMigrationFramework.StatusCollector.TotalProduced">
            <summary>
            Gets total produced records count.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.StatusCollector.TotalConsumed">
            <summary>
            Gets total consumed records count.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.StatusCollector.TotalErrors">
            <summary>
            Gets total errors count.
            </summary>
        </member>
        <member name="P:DataMigrationFramework.StatusCollector.IsStatusNotify">
            <summary>
            Gets a value indicating whether status should be notified or not.
            </summary>
        </member>
        <member name="M:DataMigrationFramework.StatusCollector.Update(System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates record counts.
            </summary>
            <param name="currentProduced">
            Current produced record count.
            </param>
            <param name="currentConsumed">
            Current consumed record count.
            </param>
            <param name="errorCount">
            Current error count.
            </param>
        </member>
    </members>
</doc>
